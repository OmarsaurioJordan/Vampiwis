<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_monster</parentName>
  <maskName>d_base1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// osci: 0:cuerpo, 1:cabeza
// paso: 0:pies
s_ani_ini(id, 2, 1);
reloj_pies = 0;

genero = choose(1, 1, 1, 0, 0, 0, 0, 2, 3);
origen = instance_find(o_lapida, irandom(instance_number(o_lapida) - 1));
aliento = m_hum_sangre * 0.5;

reloj_errar = m_hum_errar_s + random(m_hum_errar_s);
moverse = choose(true, false);
direction = random(360);
dist_ori = 1000;

xi = x;
yi = y;

reloj_fuego = 0;
reloj_nocome = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, 2.5, 5); // body
s_ani_osci(id, 1, 2.2, 3); // cara
s_ani_paso(id, 0, 0.15, 5); // pies

// votar particulas fuego
reloj_fuego = max(0, reloj_fuego - dlt);
reloj_nocome = max(0, reloj_nocome - dlt);

// disminuir vida
var defi = 1;
if genero == m_gen_inf or genero == m_gen_vie {
    defi = 1.25;
}
if s_dia() {
    if dist_ori &gt; 128 {
        aliento -= dlt * m_hum_hambre * defi * 2;
        s_quemado(id, false);
    }
    else {
        aliento -= (dlt * m_hum_hambre * defi) / 2;
    }
}
else {
    var plus = 1;
    if place_meeting(x, y, o_luz) {
        plus = 2;
    }
    var yo = id;
    with o_guerrero {
        if rol == m_rol_luz {
            if collision_circle(x, y, 64, yo, true, false) {
                plus = 2;
                break;
            }
        }
    }
    if plus == 2 {
        s_quemado(id, false);
        plus *= s_pro(m_rol_luz);
    }
    aliento -= dlt * m_hum_hambre * defi * plus;
}
if aliento &lt;= 0 {
    var aux = instance_create(x, y, o_muerto);
    aux.genero = genero;
    aux.es_zombi = true;
    instance_destroy();
    exit;
}

// errar
if s_errar_reloj(id) and random(1) &lt; 0.25 {
    var cc = instance_find(o_casa, irandom(instance_number(o_casa) - 1));
    direction = point_direction(x, y, cc.x, cc.y);
}

// colision solidos
var otro = instance_place(x, y, o_bloque);
if otro == noone {
    otro = instance_place(x, y, o_movil);
}
if otro != noone {
    var ddd = point_direction(otro.x, otro.y, x, y);
    ddd -= s_rebote(id, ddd);
    ddd -= clamp(angle_difference(ddd,
        point_direction(xprevious, yprevious, x, y)), -40, 40);
    var vel = m_hum_velomax * dlt;
    x += lengthdir_x(vel, ddd);
    y += lengthdir_y(vel, ddd);
}
else if s_dia() or aliento &gt; m_hum_sangre * 0.666 or reloj_nocome != 0 {
    // IA diurna
    dist_ori = point_distance(x, y, origen.x, origen.y);
    if dist_ori &gt; 96 {
        var ddd = point_direction(x, y, origen.x, origen.y);
        var vel = m_hum_veloci * dlt;
        x += lengthdir_x(vel, ddd);
        y += lengthdir_y(vel, ddd);
    }
}
else {
    // IA nocturna
    var ok = false;
    if aliento &lt;= m_hum_sangre * 0.5 and instance_exists(o_humano) {
        var aux = instance_nearest(x, y, o_humano);
        var ll = point_distance(x, y, aux.x, aux.y);
        if ll &lt; 68 {
            var oto = instance_create(aux.x, aux.y, o_chupa);
            oto.campesino = aux.genero;
            oto.zombi = genero;
            oto.campesino_sangre = aux.vida;
            oto.zombi_sangre = aliento;
            oto.campesino_origen = aux.origen;
            oto.zombi_origen = origen;
            if aux.rol == m_rol_cruz {
                oto.veneno = true;
            }
            with aux {
                instance_destroy();
            }
            instance_destroy();
            exit;
        }
        else if ll &lt; m_hum_vision * 2 {
            if !collision_line(x, y, aux.x, aux.y, o_bloque, true, false) {
                ok = true;
                var ddd = point_direction(x, y, aux.x, aux.y);
                var vel = m_hum_velomax * dlt;
                x += lengthdir_x(vel, ddd);
                y += lengthdir_y(vel, ddd);
            }
        }
    }
    if !ok {
        var amis = false;
        var yo = id;
        with o_vampiro {
            if amiguis == yo and point_distance(x, y, yo.x, yo.y) &lt;= m_hum_sigue {
                amis = true;
            }
        }
        if amis {
            var ddd = point_direction(x, y, o_vampiro.x, o_vampiro.y);
            var vel = m_hum_velomax * dlt;
            x += lengthdir_x(vel, ddd);
            y += lengthdir_y(vel, ddd);
        }
        else if moverse {
            var vel = m_hum_veloci * dlt;
            x += lengthdir_x(vel, direction);
            y += lengthdir_y(vel, direction);
        }
    }
}

// limites
s_limites(id);

// anima pies
if x == xprevious and y == yprevious {
    reloj_pies = max(0, reloj_pies - dlt);
}
else {
    reloj_pies = 0.25;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_current != 0 { exit; }
// pies
if reloj_pies == 0 {
    draw_sprite(d_ente, 29, xi, yi);
    draw_sprite(d_ente, 30, xi, yi);
}
else {
    var p1, p2;
    switch paso[0] {
        case 0: p1 = 0; p2 = 1; break;
        case 1: p1 = 0.3; p2 = 0.7; break;
        case 2: p1 = 0.7; p2 = 0.3; break;
        case 3: p1 = 1; p2 = 0; break;
        case 4: p1 = 0.7; p2 = 0.3; break;
        case 5: p1 = 0.3; p2 = 0.7; break;
    }
    draw_sprite(d_ente, 29, xi, yi - p1 * 12);
    draw_sprite(d_ente, 30, xi, yi - p2 * 12);
}

// cuerpo y cabeza
switch genero {
    case m_gen_muj:
        draw_sprite(d_ente, 28, xi, yi + anima[0]);
        draw_sprite(d_ente, 27, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_hom:
        draw_sprite(d_ente, 25, xi, yi + anima[0]);
        draw_sprite(d_ente, 24, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_inf:
        draw_sprite(d_ente, 20, xi, yi + anima[0]);
        draw_sprite(d_ente, 19, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_vie:
        draw_sprite(d_ente, 25, xi, yi + anima[0]);
        draw_sprite(d_ente, 22, xi, yi + anima[0] + anima[1]);
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
