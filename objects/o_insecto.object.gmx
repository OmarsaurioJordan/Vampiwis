<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_imagen</parentName>
  <maskName>d_base0</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// osci: 0:flotar, 1:aleteo
s_ani_ini(id, 2, 0);

reloj_errar = m_hum_errar_s + random(m_hum_errar_s);
moverse = choose(true, false);
direction = random(360);

xi = x;
yi = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, 3.3, 32); // flotar
s_ani_osci(id, 1, 0.6, 15); // aleteo

// errar
if s_errar_reloj(id) and random(1) &lt; 0.25 {
    var cc = instance_find(o_hongo, irandom(instance_number(o_hongo) - 1));
    direction = point_direction(x, y, cc.x, cc.y);
}

// colision solidos
var otro = instance_place(x, y, o_bloque);
if otro == noone {
    otro = instance_place(x, y, o_movil);
}
if otro != noone {
    var ddd = point_direction(otro.x, otro.y, x, y);
    ddd -= s_rebote(id, ddd);
    var vel = m_insect_veloci * dlt;
    x += lengthdir_x(vel, ddd);
    y += lengthdir_y(vel, ddd);
}
else {
    // IA
    if moverse {
        var vel = m_insect_veloci * dlt;
        x += lengthdir_x(vel, direction);
        y += lengthdir_y(vel, direction);
    }
}

// limites
s_limites(id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_current != 0 { exit; }
var yy = yi - m_proy_altura + anima[0];
draw_sprite_ext(d_efecto, 6, xi, yy, 1, 1, anima[1], c_white, 1);
draw_sprite_ext(d_efecto, 6, xi, yy, -1, 1, -anima[1], c_white, 1);
draw_sprite(d_efecto, 7, xi, yy);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
