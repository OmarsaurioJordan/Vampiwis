<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_humano</parentName>
  <maskName>d_base1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// osci: 0:cuerpo, 1:cabeza, 2:izquierda, 3:derecha
// paso: 0:pies
s_ani_ini(id, 4, 1);
reloj_pies = 0;

genero = choose(1, 1, 0, 0, 2, 3);
origen = instance_nearest(x, y, o_casa);
vida = m_hum_sangre;

reloj_errar = m_hum_errar_s + random(m_hum_errar_s);
moverse = choose(true, false);
direction = random(360);
blanco = noone;
reloj_asustado = 0;
gritar = true;

rol = irandom(6);
alarm[0] = 1;
mx = 0;
my = 0;
dir_esquive = random(360);
reloj_accion = 1;
rota_luz = random(360);

xi = x;
yi = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// re rol

switch rol {
    case m_rol_cruz:
        genero = m_gen_muj;
        break;
    case m_rol_divino:
        genero = m_gen_muj;
        reloj_accion = m_proy_flecha_caden_s;
        break;
    case m_rol_espada:
        genero = m_gen_hom;
        reloj_accion = m_hum_caden_s;
        break;
    case m_rol_luz:
        genero = m_gen_vie;
        es_ok = true;
        var aux, ant;
        var num = ceil(m_hum_vision / m_luz_paso);
        for (var i = 0; i &lt; num; i++) {
            aux = instance_create(x, y, o_luz);
            if i == 0 {
                aux.origen = id;
            }
            else {
                aux.origen = ant;
            }
            ant = aux;
        }
        break;
    case m_rol_magia:
        genero = m_gen_vie;
        reloj_accion = m_proy_mag_caden_s;
        break;
    case m_rol_rifle:
        genero = m_gen_hom;
        reloj_accion = m_proy_bala_caden_s;
        break;
    case m_rol_tambor:
        genero = m_gen_hom;
        reloj_accion = m_proy_ond_caden_s;
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, 2.5, 5); // body
s_ani_osci(id, 1, 2.2, 3); // cara
s_ani_osci(id, 2, 2.8, 4); // izq
s_ani_osci(id, 3, 1.9, 4); // der
s_ani_paso(id, 0, 0.15, 5); // pies

// errar
if s_errar_reloj(id) and random(1) &lt; 0.2 {
    if instance_exists(o_player) {
        direction = point_direction(x, y, o_player.x, o_player.y);
    }
    else {
        direction = point_direction(x, y, o_cripta.x, o_cripta.y);
    }
}

// cargar accion
reloj_accion = max(0, reloj_accion - dlt);

// asustado por ver monstruo
reloj_asustado = max(0, reloj_asustado - dlt);

// busca monstruos
if blanco != noone {
    if !instance_exists(blanco) {
        blanco = noone;
    }
    else if random(1) &lt; 0.1 {
        if point_distance(x, y, blanco.x, blanco.y) &gt; m_hum_vision or
                collision_line(x, y, blanco.x, blanco.y, o_bloque, true, false) {
            blanco = noone;
        }
        else {
            mx = blanco.x;
            my = blanco.y;
        }
    }
}
if random(1) &lt; 0.1 {
    var b = s_busqueda(id, 4, m_hum_vision);
    if b != noone {
        blanco = b;
        mx = blanco.x;
        my = blanco.y;
        // grito
        if gritar {
            gritar = false;
            var snd = noone;
            switch rol {
                case m_rol_rifle: snd = vz_hom_rifle; break;
                case m_rol_espada: snd = vz_hom_espada; break;
                case m_rol_cruz: snd = vz_muj_cruz; break;
                case m_rol_divino: snd = vz_muj_divino; break;
                case m_rol_luz: snd = vz_vie_luz; break;
                case m_rol_magia: snd = vz_vie_magia; break;
                case m_rol_tambor: snd = vz_hom_tambor; break;
            }
            if snd != noone {
                audio_play_sound_at(snd, x, y, -m_proy_altura,
                    32, m_audio_distance, 1, false, 5);
            }
        }
    }
}

// colision solidos
var otro = instance_place(x, y, o_bloque);
if otro == noone {
    otro = instance_place(x, y, o_movil);
}
if otro != noone {
    var ddd = point_direction(otro.x, otro.y, x, y);
    ddd -= s_rebote(id, ddd);
    var vel = m_hum_veloci * dlt;
    x += lengthdir_x(vel, ddd);
    y += lengthdir_y(vel, ddd);
}
else if blanco != noone {
    // IA reaccion
    reloj_asustado = m_hum_asustado_s;
    var d_min = m_hum_vision * 0.4;
    var d_max = m_hum_vision * 0.8;
    if rol == m_rol_espada and blanco.object_index != o_espectro and
            (blanco.object_index != o_vampiro or o_control.reloj_fuego != 0) {
        // espada persigue
        var ddd = point_direction(x, y, blanco.x, blanco.y);
        var vel = m_hum_veloci * dlt;
        x += lengthdir_x(vel, ddd);
        y += lengthdir_y(vel, ddd);
        d_min = 0;
    }
    else if rol == m_rol_cruz and blanco.object_index != o_espectro and
            blanco.object_index != o_bestia {
        // cruz persigue config
        if s_pro(rol) != 1 {
            d_min = m_hum_vision * 0.05;
            d_max = m_hum_vision * 0.15;
        }
        else {
            d_min = m_hum_vision * 0.1;
            d_max = m_hum_vision * 0.3;
        }
    }
    else if rol == m_rol_tambor and blanco.object_index != o_vampiro and
            blanco.object_index != o_zombi {
        // tambor persigue config
        d_min = m_hum_vision * 0.3;
        d_max = m_hum_vision * 0.6;
    }
    if d_min != 0 {
        // tiradores persiguen y mantienen a distancia
        var act = true;
        var ll = point_distance(x, y, blanco.x, blanco.y);
        if ll &gt; d_max {
            var ddd = point_direction(x, y, blanco.x, blanco.y);
            var vel = m_hum_veloci * dlt;
            x += lengthdir_x(vel, ddd);
            y += lengthdir_y(vel, ddd);
            dir_esquive = random(360);
            act = false;
        }
        else if ll &lt; d_min {
            var ddd = point_direction(blanco.x, blanco.y, x, y);
            var vel = m_hum_veloci * dlt;
            x += lengthdir_x(vel, ddd);
            y += lengthdir_y(vel, ddd);
            dir_esquive = random(360);
        }
        else {
            var vel = m_hum_veloci * dlt;
            x += lengthdir_x(vel, dir_esquive);
            y += lengthdir_y(vel, dir_esquive);
        }
        // accion
        if act and reloj_accion == 0 {
            switch rol {
                case m_rol_rifle:
                    reloj_accion = m_proy_bala_caden_s / s_pro(rol);
                    var dd = point_direction(x, y, blanco.x, blanco.y) +
                        random_range(-m_proy_bala_azar, m_proy_bala_azar);
                    var pp = instance_create(x + lengthdir_x(12, dd),
                        y + lengthdir_y(12, dd), o_proyectil);
                    pp.direction = dd;
                    break;
                case m_rol_divino:
                    reloj_accion = m_proy_flecha_caden_s / s_pro(rol);
                    var dd = point_direction(x, y, blanco.x, blanco.y) +
                        random_range(-m_proy_flecha_azar, m_proy_flecha_azar);
                    var pp = instance_create(x + lengthdir_x(12, dd),
                        y + lengthdir_y(12, dd), o_flecha);
                    pp.direction = dd;
                    break;
                case m_rol_magia:
                    reloj_accion = m_proy_mag_caden_s / s_pro(rol);
                    var dd = point_direction(x, y, blanco.x, blanco.y) +
                        random_range(-m_proy_mag_azar, m_proy_mag_azar);
                    var pp = instance_create(x + lengthdir_x(12, dd),
                        y + lengthdir_y(12, dd), o_magia);
                    pp.direction = dd;
                    break;
                case m_rol_tambor:
                    reloj_accion = m_proy_ond_caden_s / s_pro(rol);
                    var dd = random(360);
                    var paso = 360 / m_proy_ond_num;
                    var pp;
                    for (var i = 0; i &lt; m_proy_ond_num; i++) {
                        pp = instance_create(x + lengthdir_x(32, dd),
                            y + lengthdir_y(32, dd), o_onda);
                        pp.direction = dd;
                        dd += paso;
                    }
                    s_tambor(x, y);
                    break;
            }
        }
    }
}
else if reloj_asustado != 0 {
    // IA luego de ver monstruo
    if mx == 0 and my == 0 {
        if moverse {
            var vel = m_hum_veloci * dlt;
            x += lengthdir_x(vel, direction);
            y += lengthdir_y(vel, direction);
        }
    }
    else if point_distance(x, y, mx, my) &gt; 96 {
        var ddd = point_direction(x, y, mx, my);
        var vel = m_hum_veloci * dlt;
        x += lengthdir_x(vel, ddd);
        y += lengthdir_y(vel, ddd);
    }
    else {
        mx = 0;
        my = 0;
    }
}
else if s_dia() or dia &gt;= 18 {
    // IA diurna
    if moverse {
        var vel = m_hum_veloci * dlt;
        x += lengthdir_x(vel, direction);
        y += lengthdir_y(vel, direction);
    }
}
else {
    // IA nocturna
    if point_distance(x, y, origen.x, origen.y) &gt; 150 {
        var ddd = point_direction(x, y, origen.x, origen.y);
        var vel = m_hum_veloci * dlt;
        x += lengthdir_x(vel, ddd);
        y += lengthdir_y(vel, ddd);
    }
    else {
        gritar = true;
    }
}

// limites
s_limites(id);

// anima pies
if x == xprevious and y == yprevious {
    reloj_pies = max(0, reloj_pies - dlt);
}
else {
    reloj_pies = 0.25;
}

// posicionar luz
if rol == m_rol_luz {
    var pd = -1;
    if blanco != noone {
        pd = point_direction(x, y, blanco.x, blanco.y);
    }
    else if xprevious != x and yprevious != y {
        pd = point_direction(xprevious, yprevious, x, y);
    }
    if pd != -1 {
        var dd = angle_difference(rota_luz, pd);
        rota_luz -= min(abs(dd), m_luz_sigue * dlt) * sign(dd);
    }
}

// ataque de mele
if rol == m_rol_espada and reloj_accion == 0 {
    var bb = collision_circle(x, y, 48, o_monster, true, false);
    if bb != noone {
        if (bb.object_index != o_vampiro or o_control.reloj_fuego != 0) and
                bb.object_index != o_espectro {
            reloj_accion = m_hum_caden_s / s_pro(rol);
            if bb.object_index == o_zombi {
                if random(1) &lt; 0.5 {
                    bb.aliento -= m_hum_damage;
                }
            }
            else if luna == 2 and !s_dia() and bb.object_index == o_bestia {
                s_sangre(-m_hum_damage * m_vampi_bonusluna, false);
            }
            else {
                s_sangre(-m_hum_damage, false);
            }
            audio_play_sound_at(a_espada, x, y, -m_proy_altura,
                32, m_audio_distance, 1, false, 11);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_current != 0 { exit; }
// espadazo
var esp = false;
if rol == m_rol_espada {
    if reloj_accion &gt; m_hum_caden_s - 1 {
        esp = true;
        draw_sprite(d_ente, 37, xi, yi);
    }
}

// pies
if reloj_pies == 0 {
    draw_sprite(d_ente, 29, xi, yi);
    draw_sprite(d_ente, 30, xi, yi);
}
else {
    var p1, p2;
    switch paso[0] {
        case 0: p1 = 0; p2 = 1; break;
        case 1: p1 = 0.3; p2 = 0.7; break;
        case 2: p1 = 0.7; p2 = 0.3; break;
        case 3: p1 = 1; p2 = 0; break;
        case 4: p1 = 0.7; p2 = 0.3; break;
        case 5: p1 = 0.3; p2 = 0.7; break;
    }
    draw_sprite(d_ente, 29, xi, yi - p1 * 12);
    draw_sprite(d_ente, 30, xi, yi - p2 * 12);
}

// cuerpo y cabeza
switch genero {
    case m_gen_muj:
        draw_sprite(d_ente, 28, xi, yi + anima[0]);
        draw_sprite(d_ente, 26, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_hom:
        draw_sprite(d_ente, 25, xi, yi + anima[0]);
        draw_sprite(d_ente, 23, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_inf:
        draw_sprite(d_ente, 20, xi, yi + anima[0]);
        draw_sprite(d_ente, 18, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_vie:
        draw_sprite(d_ente, 25, xi, yi + anima[0]);
        draw_sprite(d_ente, 21, xi, yi + anima[0] + anima[1]);
        break;
}

// herramientas
switch rol {
    case m_rol_cruz:
        draw_sprite(d_ente, 4, xi, yi + anima[0] + anima[3]);
        break;
    case m_rol_divino:
        draw_sprite(d_ente, 13, xi, yi + anima[0] + anima[1]);
        draw_sprite(d_ente, 8, xi, yi + anima[0] + anima[3]);
        break;
    case m_rol_espada:
        if esp {
            draw_sprite(d_ente, 39, xi, yi + anima[0] + anima[2]);
        }
        else {
            draw_sprite(d_ente, 12, xi, yi + anima[0] + anima[2]);
            draw_sprite(d_ente, 11, xi, yi + anima[0] + anima[3]);
        }
        break;
    case m_rol_luz:
        draw_sprite(d_ente, 5, xi, yi + anima[0] + anima[3]);
        break;
    case m_rol_magia:
        draw_sprite(d_ente, 6, xi, yi + anima[0] + anima[3]);
        break;
    case m_rol_rifle:
        draw_sprite(d_ente, 10, xi, yi + anima[0] + anima[3]);
        break;
    case m_rol_tambor:
        draw_sprite(d_ente, 7, xi, yi + anima[0] + anima[2]);
        draw_sprite(d_ente, 9, xi, yi + anima[0] + anima[3]);
        break;
}

// espadazo
if esp {
    draw_sprite(d_ente, 38, xi, yi);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
