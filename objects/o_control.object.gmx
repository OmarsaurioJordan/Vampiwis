<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// inicializacion
s_ventana();
s_randomize();
alarm[0] = room_speed * irandom_range(5, 10);
audio_channel_num(150);
audio_listener_orientation(0, 0, 1, 0, -1, 0);
audio_falloff_set_model(audio_falloff_linear_distance_clamped);
draw_set_font(d_letras);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
s_ani_ini(id, 3, 0); // 0:titulo, 1:creditos, 2:help
audio_play_sound(a_fondo_dark, 100, true);
s_set_ofihttp(id);

if m_editor {
    view_wview[0] = room_width * 0.3;
    view_hview[0] = view_wview[0];
}

globalvar dlt, dltg, sangre, hora, poblacion, luna, dia, diosa, esman, mygp, englis;
dlt = 0;
dltg = 0;
englis = os_get_language() != "es";
poblacion = instance_number(o_casa);
sangre = m_vampi_sangre * 0.8;
hora = 11; // 0:0, 4:6, 8:12, 12:18, 16:24
dia = 1; // dias de supervivencia
luna = 1; // 0:nueva, 1:creciente, 2:llena, 3:menguante
titulo = true;
finalizado = false;
reloj_reinicio = 4;
history = ds_list_create();
trampa = false;
reloj_espera_ini = 1;
reloj_fuego = 0;
reloj_nocome = 0;
reloj_nochemal = 0;
ver_literatura = -1; // -1:no, 0:cancelable, ++:reloj
ver_memoria = true; // si esta disponible el tramo
memoria = 0; // texto literatura visto
reloj_niebla = 0;
mas_zombi = 1; // para invasion nocturna
s_gamepads();

ini_open("configuracion.ini");
diosa = ini_read_real("stats", "diosa", 0) != 0; // forma femenina
globalvar stats;
stats[0] = 0; // sangre actual
stats[1] = ini_read_real("stats", "sangre", 0); // sangre record
stats[2] = 0; // muertes actual
stats[3] = ini_read_real("stats", "muertes", 0); // muertes record
stats[4] = ini_read_real("stats", "dias", 1); // dias record
stats[5] = ini_read_real("stats", "dia_sangre", 0); // sangre de dia max
stats[6] = ini_read_real("stats", "dia_muertes", 0); // muertes de dia max
ini_close();

if diosa {
    esman = choose(true, false);
}
else {
    esman = true;
}
if !esman or memoria &gt; 0 {
    //ver_memoria = false;
}

// editor
clicdx = 0;
clicdy = 0;

// crea cosas desde el mouse, todo el mundo
instance_create(0, 0, o_mouse);
view_xview[0] = o_cripta.x - view_wview[0] / 2;
view_yview[0] = o_cripta.y - view_hview[0] / 2;

alarm[1] = room_speed * 6;

if !file_exists("vampiwis_info.pdf") {
    file_copy("Vampiwis.pdf", "vampiwis_info.pdf");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// descargas
s_http_descargas("vampiwis");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///randomize
s_randomize();
alarm[0] = room_speed * irandom_range(5, 10);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// time y logic

// time
dlt = min(0.1, delta_time * 0.000001);
if o_cripta.dormido {
    dlt *= m_dormirplus;
}
dltg = dlt;

// animacion menu inicial
if titulo {
    s_ani_osci(id, 0, 4.3 * m_dormirplus, 0.25);
    s_ani_osci(id, 1, 5.1 * m_dormirplus, 0.25);
    s_ani_osci(id, 2, 3.8 * m_dormirplus, 0.25);
}
else if reloj_reinicio == 0 {
    s_ani_osci(id, 0, 4.3, 0.25);
    s_ani_osci(id, 1, 5.1, 0.25);
    s_ani_osci(id, 2, 3.8, 0.25);
}

// muestra historia
if ver_literatura != -1 {
    ver_literatura = max(0, ver_literatura - dlt);
    dlt = 0;
    if ver_literatura == 0 and (s_boton(0) or s_boton(1)) {
        ver_literatura = -1;
        memoria++;
        ini_open("configuracion.ini");
        ini_write_real("stats", "memoria", max(memoria, ini_read_real("stats", "memoria", 0)));
        ini_close();
    }
}

// para no autoiniciar, histeresis
reloj_espera_ini = max(0, reloj_espera_ini - dlt);

// pausa
if instance_exists(o_come) or titulo or o_cripta.info {
    dlt = 0;
}

// votar particulas niebla
if ver_memoria {
    reloj_niebla -= dlt;
    if reloj_niebla &lt;= 0 {
        reloj_niebla = random(0.1);
        s_niebla(1, o_pozo.x, o_pozo.y, 100);
    }
    with o_player {
        if point_distance(x, y, o_pozo.x, o_pozo.y) &lt; 100 {
            o_control.ver_literatura = 3;
            o_control.ver_memoria = false;
        }
    }
}

// votar particulas fuego y no comer
reloj_fuego = max(0, reloj_fuego - dlt);
reloj_nocome = max(0, reloj_nocome - dlt);
reloj_nochemal -= dltg / m_dormirplus;
if reloj_nochemal &lt;= 0 {
    reloj_nochemal = 0.8;
}

// consumo sangre
if !finalizado {
    if s_dia() {
        if !o_cripta.dormido {
            s_sangre(-m_vampi_hambre * dlt * m_vampi_hambremas, false);
            s_quemado(o_player, true);
        }
    }
    else {
        if o_cripta.dormido {
            s_sangre(-m_vampi_hambre * dlt * m_vampi_hambremas / 2, false);
            if sangre == 0 {
                s_vapor(m_vapor_parti, o_cripta.x, o_cripta.y, m_vapor_radio);
            }
        }
        else {
            var plus = false;
            with o_luz {
                if es_ok {
                    if place_meeting(x, y, o_espectro) or place_meeting(x, y, o_vampiro) {
                        plus = true;
                        break;
                    }
                }
            }
            with o_guerrero {
                if rol == m_rol_luz {
                    if collision_circle(x, y, 64, o_espectro, true, false) or 
                            collision_circle(x, y, 64, o_vampiro, true, false) {
                        plus = true;
                        break;
                    }
                }
            }
            with o_espectro {
                if reloj_espejo != 0 {
                    plus = false;
                }
            }
            var sss = -m_vampi_hambre * dlt;
            if plus { // quemado por foco de luz
                s_quemado(o_player, true);
                sss *= s_pro(m_rol_luz);
                if instance_exists(o_espectro) {
                    if luna == 0 {
                        s_sangre(sss * m_vampi_hambremas, false);
                    }
                    else {
                        s_sangre(sss * m_vampi_hambremas / m_vampi_bonusluna, false);
                    }
                }
                else {
                    s_sangre(sss * m_vampi_hambremas, false);
                }
            }
            else {
                s_sangre(sss * 2, false); // normal, multiplica porque estaba muy lento
            }
        }
    }
    // forma vampiro gratis
    if !finalizado and sangre &lt;= m_vampi_sangre * 0.1 {
        if instance_exists(o_espectro) or instance_exists(o_bestia) {
            with o_player {
                s_vapor(m_vapor_parti, x, y, m_vapor_radio);
                if esman {
                    audio_play_sound_at(vz_vampi_transform, x, y, -m_proy_altura,
                        32, m_audio_distance, 1, false, 19);
                }
                else {
                    audio_play_sound_at(vz_vampa_transform, x, y, -m_proy_altura,
                        32, m_audio_distance, 1, false, 19);
                }
                instance_create(x, y, o_vampiro);
                instance_destroy();
            }
        }
    }
}

// sonido apure
if instance_exists(o_player) and sangre &lt; m_vampi_sangre * 0.2 {
    if !audio_is_playing(a_prisasol) {
        audio_play_sound(a_prisasol, 100, false);
    }
}

// tiempo del mundo
if !finalizado {
    var vh = hora;
    hora += dlt / m_duradia;
    if hora &gt; 16 {
        hora -= 16;
    }
     // amanecer
    else if hora &gt;= 4 and vh &lt; 4 {
        var ag = audio_play_sound(a_gallo, 100, false);
        audio_sound_gain(ag, 0.8, 0);
        dia++;
        s_amanecer();
        // curar humanos
        with o_humano {
            moverse = true;
            vida = min(m_hum_sangre, vida + m_hum_sangre * 0.25);
        }
    }
     // anochecer
    else if hora &gt;= 12 and vh &lt; 12 {
        audio_play_sound(a_buho, 100, false);
        with o_zombi {
            moverse = true;
        }
        // crear humanos
        s_poda_humanos();
        s_invasion();
        // oleada zombi
        var d = dia / 5;
        if dia &gt;= 20 and frac(d) == 0 {
            with o_lapida {
                instance_create(x + random_range(-10, 10),
                    y + random_range(-10, 10), o_zombi);
            }
            repeat (d - 4) * 2 {
                with instance_find(o_lapida, irandom(instance_number(o_lapida) - 1)) {
                    instance_create(x + random_range(-10, 10),
                        y + random_range(-10, 10), o_zombi);
                }
            }
        }
        // oleada cazadores
        if dia &gt;= 27 and frac((dia - 7) / 10) == 0 {
            s_cazadores();
        }
        // ver literatura
        if memoria &lt;= m_num_literatura {//and esman {
            if !(dia == 1 and ver_memoria) {
                ver_memoria = random(1) &lt; 0.5;
            }
        }
    }
}
// mostrar cartel de reinicio
else {
    reloj_reinicio = max(0, reloj_reinicio - dlt);
}

// mover camara
if m_editor {
    s_cam_move(mouse_x, mouse_y, id);
    s_cam_zoom(mouse_x, mouse_y);
}
else {
    with o_player {
        var cx = view_xview[0] + view_wview[0] / 2;
        var cy = view_yview[0] + view_hview[0] / 2 + 125;
        var cl = point_distance(cx, cy, x, y);
        var cd = point_direction(cx, cy, x, y);
        switch object_index {
            case o_vampiro: var v = min(cl, m_vampi_veloci) * dlt * 2; break;
            case o_bestia: var v = min(cl, m_vampi_embiste) * dlt * 2; break;
            case o_espectro: var v = min(cl, m_vampi_vuela) * dlt * 2; break;
            default: var v = min(cl, m_vampi_veloci) * dlt * 2; break;
        }
        view_xview[0] += lengthdir_x(v, cd);
        view_yview[0] += lengthdir_y(v, cd);
        view_xview[0] = clamp(view_xview[0], 0, room_width - view_wview[0]);
        view_yview[0] = clamp(view_yview[0], 0, room_height - view_hview[0]);
        // listener
        cx = view_xview[0] + view_wview[0] / 2;
        cy = view_yview[0] + view_hview[0] / 2 + 125;
        audio_listener_position(cx, cy, -512); // altura
    }
}

// cosas se esconden del radio de vision
var ll;
var xx = view_xview[0] + view_wview[0] / 2;
var yy = view_yview[0] + view_hview[0] / 2;
var mm = view_wview[0] / 2 + 64;
with o_imagen {
    ll = point_distance(x, y, xx, yy);
    visible = ll &lt;= mm;
}

// comandos generales
var rls = s_boton(1);
if keyboard_check_pressed(vk_escape) {
    game_end();
}
else if keyboard_check_pressed(vk_tab) {
    if !window_get_fullscreen() {
        screen_save("img.png");
        var f = get_save_filename("IMAGE|*.png", "img");
        if f != "" {
            file_copy("img.png", f);
        }
    }
    else {
        window_set_fullscreen(false);
    }
}
else if keyboard_check_pressed(vk_f4) {
    window_set_fullscreen(!window_get_fullscreen());
}
else if keyboard_check_pressed(vk_f1) {
    englis = !englis;
}
else if reloj_reinicio == 0 and (s_boton(0) or rls) {
    // eliminar lo previo
    with o_humano {
        instance_destroy();
    }
    with o_cosagame {
        instance_destroy();
    }
    with o_muerto {
        instance_destroy();
    }
    with o_come {
        instance_destroy();
    }
    with o_monster {
        instance_destroy();
    }
    // poner lo nuevo
    view_xview[0] = o_cripta.x - view_wview[0] / 2;
    view_yview[0] = o_cripta.y - view_hview[0] / 2;
    ds_list_clear(history);
    poblacion = instance_number(o_casa);
    sangre = m_vampi_sangre * 0.8;
    hora = 11;
    luna = 1;
    titulo = true;
    finalizado = false;
    reloj_reinicio = 4;
    reloj_espera_ini = 1;
    reloj_fuego = 0;
    reloj_nocome = 0;
    ver_literatura = -1;
    ver_memoria = false;
    mas_zombi = 1;
    if diosa {
        esman = choose(true, false);
    }
    else {
        esman = true;
    }
    o_cripta.dormido = true;
    o_cripta.info = false;
    if rls {
        if keyboard_check(vk_space) {
            dia = max(m_trampa, stats[4] - 3);
            stats[0] = 0;
            stats[2] = 0;
            if dia == m_trampa {
                trampa = true;
            }
        }
        else {
            dia = max(1, stats[4] - 3);
            var prop = dia / stats[4];
            stats[0] = stats[5] * prop;
            stats[2] = floor(stats[6] * prop);
        }
        repeat poblacion {
            s_poda_humanos();
        }
        repeat dia - 1 {
            s_amanecer();
        }
        ini_open("configuracion.ini");
        memoria = ini_read_real("stats", "memoria", 0);
        ini_close();
    }
    else {
        dia = 1;
        stats[0] = 0;
        stats[2] = 0;
        memoria = 0;
        if true {//esman {
            ver_memoria = true;
        }
        with o_casa {
            instance_create(x + random_range(-8, 8), y + random_range(-8, 8), o_campesino);
        }
    }
}
else if reloj_reinicio == 0 and keyboard_check_pressed(vk_space) {
    if !window_get_fullscreen() {
        if stats[4] &gt;= 12 {
            var f = get_save_filename("PDF|*.pdf", "Vampiwis.pdf");
            if f != "" {
                file_copy("Vampiwis.pdf", f);
            }
        }
        else {
            var f = get_save_filename("PDF|*.pdf", "Vampiwis_cut.pdf");
            if f != "" {
                file_copy("Vampiwis_cut.pdf", f);
            }
        }
        // obtener la historia
        if memoria &gt; m_num_literatura {
            if englis {
                var f = get_save_filename("PDF|*.pdf", "Vampiwis_history.pdf");
                if f != "" {
                    file_copy("Vampiwis_history.pdf", f);
                }
            }
            else {
                var f = get_save_filename("PDF|*.pdf", "Vampiwis_historia.pdf");
                if f != "" {
                    file_copy("Vampiwis_historia.pdf", f);
                }
            }
        }
    }
    else {
        window_set_fullscreen(false);
    }
}

// cambio control
if mygp != -1 {
    if gamepad_button_check_pressed(mygp, gp_select) {
        s_gamepads();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gamepads
s_gamepads();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///web oficial
s_recv_ofihttp(id, async_load);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_record();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI
if view_current != 0 { exit; }

var xx = view_xview[0];
var yy = view_yview[0];
var ww = view_wview[0];
var hh = view_hview[0];

// sangre
var san = 0;
if reloj_nochemal &lt; 0.4 or !(o_cripta.dormido and !s_dia()) {
    san = sangre;
}
var sss = surface_create(208, 143);
surface_set_target(sss);
draw_clear_alpha(c_black, 0);
if san &gt; m_vampi_sangre * 0.75 or reloj_nocome != 0 or reloj_fuego != 0 or s_dia() {
    draw_sprite(d_gui, 10, 102, 75);
}
else {
    draw_sprite(d_gui, 9, 102, 75);
}
draw_set_blend_mode(bm_subtract);
draw_set_alpha(0);
draw_rectangle(lerp(40, 195, san / m_vampi_sangre), 0, 195, 143, false);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
draw_sprite(d_gui, 8, 102, 75);
surface_reset_target();
draw_surface(sss, xx, yy - 32);
surface_free(sss);

// reloj
draw_sprite(d_gui, 7, xx + ww - 79, yy + 75);
draw_sprite_ext(d_gui, 6, xx + ww - 79, yy + 75,
    1, 1, lerp(810, 90, hora / 16), c_white, 1);

// almanaque
draw_sprite(d_gui, 0, xx + 54, yy + hh - 68);
draw_text_colour(xx + 54, yy + hh - 68, string(dia),
    c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);

// lunacion
if s_dia() {
    draw_sprite(d_gui, 5, xx + ww - 79, yy + hh - 68);
}
else {
    draw_sprite(d_gui, 1 + luna, xx + ww - 79, yy + hh - 68);
}

// titulo
if titulo {
    draw_sprite_ext(d_titulo, 0, xx + ww / 2, yy + hh * 0.25,
        1 + anima[0], 1 + anima[0], 0, c_white, 1);
    draw_sprite_ext(d_titulo, 1, xx + ww / 2, yy + hh * 0.5,
        1 + anima[2], 1 + anima[2], 0, c_white, 1);
    draw_sprite_ext(d_omwekiatl, 0, xx + ww / 2, yy + hh * 0.75,
        1 + anima[1], 1 + anima[1], 0, c_white, 1);
}

// mostrar cartel de reinicio
if reloj_reinicio == 0 {
    draw_sprite_ext(d_titulo, 2, xx + ww / 2, yy + hh * 0.2,
        1 + anima[2], 1 + anima[2], 0, c_white, 1);
    
    var txt = "Day: " + string(dia) + " / " + string(stats[4]) +
        "#Murder: " + string(stats[2]) + " / " + string(stats[3]) +
        "#Blood: " + string(s_score(stats[0])) + " / " +
        string(s_score(stats[1]));
    s_textote(xx + ww / 2, yy + hh * 0.4, txt, 1.5 + anima[1], c_maroon, 1);
    
    if stats[4] &gt;= 12 {
        txt = "Press Space for COMPLETE PDF help";
    }
    else {
        txt = "Press Space to obtain PDF help";
    }
    s_textote(xx + ww / 2, yy + hh * 0.8, txt, 1.5 + anima[0], c_maroon, 1);
}

// mostrar informacion
if o_cripta.info {
    if room == w_pc {
        var esc = 1.9765625; //(1024 - 12) / 512;
        draw_sprite_ext(d_info, o_cripta.aguja, xx + ww / 2, yy + hh / 2,
            esc, esc, 0, c_white, 1);
    }
}

// mostrar literatura
if ver_literatura != -1 {
    var esc = (ww * 0.9) / 276;
    draw_sprite_ext(d_literatura, 0, xx + ww / 2, yy + hh / 2,
        esc, esc, 0, c_white, 1);
    var head = string(memoria + 1) + " / " + string(m_num_literatura + 1) + "##";
    var idi = "##F1: ";
    if englis {
        idi += "español";
    }
    else {
        idi += "english";
    }
    draw_text_ext_transformed_colour(xx + ww / 2, yy + hh / 2,
        head + s_literatura(memoria) + idi, 32, ww * 0.75, 1, 1, 0,
        c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
}

// mouse x,y
/*
draw_text_transformed_colour(xx + ww / 2, yy + hh - 32,
    string(device_mouse_raw_x(0)) + " - " + string(device_mouse_raw_y(0)),
    1, 1, 0, c_white, c_white, c_white, c_white, 1);
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mobil

if room == w_pc { exit; }

draw_sprite(d_boton, 0, 128, view_hview[0] / 2);

draw_sprite_ext(d_boton, 0, 1408, view_hview[0] / 2 - 150,
    0.8, 0.8, 0, c_white, 1);
draw_sprite_ext(d_boton, 0, 1408, view_hview[0] / 2 + 150,
    0.8, 0.8, 0, c_white, 1);

// mostrar informacion
if o_cripta.info {
    var esc = 2.4765625; //(1280 - 12) / 512;
    draw_sprite_ext(d_info, o_cripta.aguja, 640, 512,
        esc, esc, 0, c_white, 1);
}

/*
draw_circle_colour(device_mouse_x_to_gui(0), device_mouse_y_to_gui(0),
    10, c_red, c_black, false);
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sombras
if view_current != 0 { exit; }

// iluminacion
var xx = view_xview[0];
var yy = view_yview[0];
var sss = surface_create(view_wview[0], view_hview[0]);
surface_set_target(sss);
draw_clear_alpha(c_black, 1);
draw_set_blend_mode(bm_subtract);
with o_vela {
    draw_sprite_ext(d_luz, 0, x - xx, y - yy, 2, 2, 0, c_white, 1);
}
with o_flecha {
    draw_sprite_ext(d_luz, 0, x - xx, y - yy, 1, 1, 0, c_white, 1);
}
with o_luz {
    if es_ok {
        draw_sprite_ext(d_luz, 0, x - xx, y - yy, 1.5, 1.5, 0, c_white, 1);
    }
}
with o_guerrero {
    if rol == m_rol_luz {
        draw_sprite_ext(d_luz, 0, xi - xx, yi - yy, 2, 2, 0, c_white, 1);
    }
}
draw_set_blend_mode(bm_normal);
surface_reset_target();
var ilum;
if hora &lt;= 12.5 and hora &gt;= 11.5 {
    ilum = lerp(0, m_noche, hora - 11.5);
}
else if hora &lt;= 4.5 and hora &gt;= 3.5 {
    ilum = lerp(m_noche, 0, hora - 3.5);
}
else if hora &lt; 3.5 or hora &gt; 12.5 {
    ilum = m_noche;
}
else {
    ilum = 0;
}
draw_surface_ext(sss, xx, yy, 1, 1, 0, c_white, ilum);
surface_free(sss);

// sombras
with o_monster {
    draw_sprite(d_sombra, 0, xi, yi);
}
if !finalizado {
    with o_mouse {
        draw_sprite(d_sombra, 1, x, y);
    }
}
with o_humano {
    draw_sprite(d_sombra, 0, xi, yi);
}
with o_chupa {
    draw_sprite(d_sombra, 0, x, y);
}
with o_come {
    draw_sprite(d_sombra, 0, x, y);
}
with o_gato {
    draw_sprite(d_sombra, 1, xi, yi);
}
with o_insecto {
    draw_sprite(d_sombra, 2, xi, yi);
}
with o_muerto {
    draw_sprite_ext(d_sombra, 0, x, y, 1, 1, 0, c_white,
        reloj_fin / m_descompone_s);
}
with o_proyectil {
    draw_sprite_ext(d_efesombra, 8, x, y, 1, 1, direction, c_white, 1);
}
with o_flecha {
    draw_sprite_ext(d_efesombra, 4, x, y, 1, 1, direction, c_white, 1);
}
with o_magia {
    draw_sprite_ext(d_efesombra, 9, x, y, 1, 1, image_angle, c_white, 1);
}
with o_onda {
    draw_sprite_ext(d_efesombra, 3, x, y, 1, 1, image_angle, c_white, 1);
}
with o_vapor {
    draw_sprite_ext(d_efesombra, 0, x, y, 1, 1, 0, c_white,
        reloj_vapor / reloj_vapor_max);
}
with o_fuego {
    draw_sprite_ext(d_efesombra, 2, x, y, 1, 1, 0, c_white,
        reloj_vapor / reloj_vapor_max);
}

// vision circular oscura
if !m_editor {
    draw_sprite_ext(d_vision, 0, view_xview[0], view_yview[0],
        1024 / 80, 1024 / 80, 0, c_white, 1);
}

// puntero inicial
if dia == 1 {
    with o_player {
        if o_control.ver_memoria {
            draw_sprite_ext(d_punteroini, 0, xi, yi, 1.2, 1.2,
                point_direction(xi, yi, o_pozo.x, o_pozo.y), c_white, 1);
        }
        else if instance_exists(o_humano) {
            var aux = instance_nearest(room_width, room_height / 2, o_humano);
            draw_sprite_ext(d_punteroini, 0, xi, yi, 1.2, 1.2,
                point_direction(xi, yi, aux.x, aux.y), c_white, 1);
        }
    }
}
else if dia == 2 and s_dia() {
    with o_player {
        draw_sprite_ext(d_punteroini, 0, xi, yi, 1.2, 1.2,
            point_direction(xi, yi, o_cripta.x, o_cripta.y), c_white, 1);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
