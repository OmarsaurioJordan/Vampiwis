<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_humano</parentName>
  <maskName>d_base1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// osci: 0:cuerpo, 1:cabeza
// paso: 0:pies
s_ani_ini(id, 2, 1);
reloj_pies = 0;

if dia &lt;= 2 {
    genero = choose(1, 1, 0, 0, 2, 3);
}
else if dia &lt;= 12 {
    genero = choose(1, 0, 0, 2, 2, 3);
}
else {
    genero = choose(1, 0, 0, 0, 2, 2, 2, 3);
}
origen = instance_nearest(x, y, o_casa);
vida = m_hum_sangre;

reloj_errar = m_hum_errar_s + random(m_hum_errar_s);
moverse = choose(true, false);
direction = random(360);
blanco = noone;
reloj_asustado = 0;

rol = m_rol_camp;
gritar = true;

xi = x;
yi = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, 2.5, 5); // body
s_ani_osci(id, 1, 2.2, 3); // cara
s_ani_paso(id, 0, 0.15, 5); // pies

// errar
if s_errar_reloj(id) and random(1) &lt; 0.2 {
    switch genero {
        case m_gen_hom:
            var aux = instance_nearest(0, 0, o_casa);
            direction = point_direction(x, y, aux.x, aux.y);
            break;
        case m_gen_muj:
            direction = point_direction(x, y, o_pozo.x, o_pozo.y);
            break;
        case m_gen_vie:
            direction = point_direction(x, y, o_cripta.x, o_cripta.y);
            break;
        case m_gen_inf:
            direction = point_direction(x, y, 2048, 2048 + 254);
            break;
    }
}

// asustado por ver monstruo
reloj_asustado = max(0, reloj_asustado - dlt);

// busca monstruos
if blanco != noone {
    if !instance_exists(blanco) {
        blanco = noone;
    }
    else if random(1) &lt; 0.1 {
        if point_distance(x, y, blanco.x, blanco.y) &gt; m_hum_vision or
                collision_line(x, y, blanco.x, blanco.y, o_bloque, true, false) {
            blanco = noone;
        }
    }
}
if random(1) &lt; 0.1 {
    var b = s_busqueda(id, 4, m_hum_vision);
    if b != noone {
        blanco = b;
        // grito
        if gritar {
            gritar = false;
            var snd = noone;
            switch genero {
                case m_gen_hom: snd = vz_hom_see; break;
                case m_gen_muj: snd = vz_muj_see; break;
                case m_gen_vie: snd = vz_vie_see; break;
                case m_gen_inf: snd = vz_inf_see; break;
            }
            if snd != noone {
                audio_play_sound_at(snd, x, y, -m_proy_altura,
                    32, m_audio_distance, 1, false, 4);
            }
        }
    }
}

// colision solidos
var otro = instance_place(x, y, o_bloque);
if otro == noone {
    otro = instance_place(x, y, o_movil);
}
if otro != noone {
    var ddd = point_direction(otro.x, otro.y, x, y);
    ddd -= s_rebote(id, ddd);
    var vel = m_hum_veloci * dlt;
    x += lengthdir_x(vel, ddd);
    y += lengthdir_y(vel, ddd);
}
else if blanco != noone {
    // IA reaccion
    reloj_asustado = m_hum_asustado_s;
    var ddd = point_direction(blanco.x, blanco.y, x, y);
    var vel = m_hum_veloci * dlt;
    x += lengthdir_x(vel, ddd);
    y += lengthdir_y(vel, ddd);
}
else if s_dia() or reloj_asustado != 0 or dia &gt;= 18 {
    // IA diurna
    if moverse {
        var vel = m_hum_veloci * dlt;
        x += lengthdir_x(vel, direction);
        y += lengthdir_y(vel, direction);
    }
}
else {
    // IA nocturna
    if point_distance(x, y, origen.x, origen.y) &gt; 150 {
        var ddd = point_direction(x, y, origen.x, origen.y);
        var vel = m_hum_veloci * dlt;
        x += lengthdir_x(vel, ddd);
        y += lengthdir_y(vel, ddd);
    }
    else {
        gritar = true;
    }
}

// limites
s_limites(id);

// anima pies
if x == xprevious and y == yprevious {
    reloj_pies = max(0, reloj_pies - dlt);
}
else {
    reloj_pies = 0.25;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_current != 0 { exit; }
// pies
if reloj_pies == 0 {
    draw_sprite(d_ente, 29, xi, yi);
    draw_sprite(d_ente, 30, xi, yi);
}
else {
    var p1, p2;
    switch paso[0] {
        case 0: p1 = 0; p2 = 1; break;
        case 1: p1 = 0.3; p2 = 0.7; break;
        case 2: p1 = 0.7; p2 = 0.3; break;
        case 3: p1 = 1; p2 = 0; break;
        case 4: p1 = 0.7; p2 = 0.3; break;
        case 5: p1 = 0.3; p2 = 0.7; break;
    }
    draw_sprite(d_ente, 29, xi, yi - p1 * 12);
    draw_sprite(d_ente, 30, xi, yi - p2 * 12);
}

// cuerpo y cabeza
switch genero {
    case m_gen_muj:
        draw_sprite(d_ente, 28, xi, yi + anima[0]);
        draw_sprite(d_ente, 26, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_hom:
        draw_sprite(d_ente, 25, xi, yi + anima[0]);
        draw_sprite(d_ente, 23, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_inf:
        draw_sprite(d_ente, 20, xi, yi + anima[0]);
        draw_sprite(d_ente, 18, xi, yi + anima[0] + anima[1]);
        break;
    case m_gen_vie:
        draw_sprite(d_ente, 25, xi, yi + anima[0]);
        draw_sprite(d_ente, 21, xi, yi + anima[0] + anima[1]);
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
