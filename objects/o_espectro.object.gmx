<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_player</parentName>
  <maskName>d_base1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// osci: 0:cuerpo, 1:cabeza
s_ani_ini(id, 2, 0);

dir_vuela = point_direction(x, y, o_mouse.x, o_mouse.y);
reloj_espejo = 0;

xi = x;
yi = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, 1.8, 7); // body
s_ani_osci(id, 1, 1.5, 3); // cara

if o_control.ver_literatura != -1 {
    exit;
}

// meterse por espejos
reloj_espejo = max(0, reloj_espejo - dlt);
var espj = instance_place(x, y, o_espejo);
if espj != noone and reloj_espejo == 0 {
    reloj_espejo = 3;
    var aux;
    do {
        aux = instance_find(o_espejo,
            irandom(instance_number(o_espejo) - 1));
    }
    until aux != espj;
    x = aux.x + random_range(-12, 12);
    y = aux.y + random_range(-12, 12);
    xi = x;
    yi = y;
    view_xview[0] = aux.x - view_wview[0] / 2;
    view_yview[0] = aux.y - view_hview[0] / 2;
    audio_play_sound_at(a_espejo, x, y, -m_proy_altura,
        32, m_audio_distance, 1, false, 17);
}

// cambio direccion
var pd = point_direction(x, y, o_mouse.x, o_mouse.y);
var dd = angle_difference(dir_vuela, pd);
dir_vuela -= min(abs(dd), m_vampi_giro * dlt) * sign(dd);

// colision solidos
var otro = instance_place(x, y, o_bloque);
if otro != noone {
    direction = point_direction(otro.x, otro.y, x, y);
    direction -= s_rebote(id, direction);
    var vel = m_vampi_vuela * dlt;
    x += lengthdir_x(vel, direction);
    y += lengthdir_y(vel, direction);
}
else {
    // manejo player
    var vel = m_vampi_vuela * dlt;
    x += lengthdir_x(vel, dir_vuela);
    y += lengthdir_y(vel, dir_vuela);
}

// limites
s_limites(id);

// chupa sangre
if !s_dia() and sangre &lt;= m_vampi_sangre * 0.75 and o_control.reloj_nocome == 0 {
    var otro = collision_circle(x, y, m_areachupa, o_humano, true, false);
    if otro != noone {
        if o_control.reloj_fuego == 0 or otro.rol == m_rol_luz {
            if otro.vida &gt; m_hum_sangre * m_vampi_dejavivo {
                var com = instance_create(otro.x, otro.y, o_come);
                com.campesino = otro.genero;
                com.campesino_sangre = otro.vida;
                com.campesino_origen = otro.origen;
                com.forma = 1;
                with otro {
                    instance_destroy();
                }
                instance_destroy();
                exit;
            }
        }
    }
}

// transformacion
if s_boton(0) {
    if s_sangre(-m_cost_transform, true) {
        s_vapor(m_vapor_parti, x, y, m_vapor_radio);
        if esman {
            audio_play_sound_at(vz_vampi_transform, x, y, -m_proy_altura,
                32, m_audio_distance, 1, false, 19);
        }
        else {
            audio_play_sound_at(vz_vampa_transform, x, y, -m_proy_altura,
                32, m_audio_distance, 1, false, 19);
        }
        instance_create(x, y, o_vampiro);
        instance_destroy();
    }
}
// teleportacion
else if s_boton(1) {
    if s_puede_teleportar() {
        var ggg = m_cost_teleport;
        if luna == 0 and !s_dia() {
            ggg *= m_vampi_bonusluna;
        }
        if s_sangre(-ggg, true) {
            s_vapor(m_vapor_parti, x, y, m_vapor_radio);
            audio_play_sound_at(a_teleporta, x, y, -m_proy_altura,
                32, m_audio_distance, 1, false, 18);
            x = o_mouse.x;
            y = o_mouse.y;
            xi = x;
            yi = y;
            s_vapor(m_vapor_parti, x, y, m_vapor_radio);
            dir_vuela = point_direction(xprevious, yprevious, x, y);
            // eliminar zombie
            var vic = instance_place(x, y, o_zombi);
            if vic != noone {
                var aux = instance_create(vic.x, vic.y, o_muerto);
                aux.genero = vic.genero;
                aux.es_zombi = true;
                s_sangre(vic.aliento * 0.1, true);
                audio_play_sound_at(vz_zombi_die, vic.x, vic.y, -m_proy_altura,
                    32, m_audio_distance, 1, false, 14);
                with vic {
                    instance_destroy();
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_current != 0 { exit; }
var xx = 71;
var yy = 247;
var ss = surface_create(140, 254);
surface_set_target(ss);
draw_clear_alpha(c_black, 0);
// cuerpo y cabeza
draw_sprite(d_ente, 32, xx, yy + anima[0]);
draw_sprite(d_ente, 31, xx, yy + anima[0] + anima[1]);
// fin
surface_reset_target();
var a = 0.8;
if luna == 0 and !s_dia() {
    a = 1;
}
draw_surface_ext(ss, xi - xx, yi - yy, 1, 1, 0, c_white, a);
surface_free(ss);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
